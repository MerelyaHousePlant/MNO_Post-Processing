cat("No phone:", no_phone, "\n")
cat("One phone:", one_phone, "\n")
cat("Two phones:", two_phones, "\n")
# Joining the data for dataset1--------------------------------------------------------
phones <- persons %>%
select(t, Mobile.Phone.s..ID) %>%
mutate(Mobile.Phone.s..ID = as.character(Mobile.Phone.s..ID)) %>%
separate_rows(Mobile.Phone.s..ID, sep = "-") %>%
filter(!is.na(Mobile.Phone.s..ID) & Mobile.Phone.s..ID != "")
# Only Event Code of 0 and 2 corresponds to a successful connection
phone_to_antenna <- antennas_info %>%
filter(EventCode %in% c(0, 2)) %>%
mutate(PhoneId = as.character(PhoneId)) %>%
select(t, PhoneId, AntennaId,TileId) %>%
distinct()
nrow(phone_to_antenna)
# Checking data integrity -------------------------------------------------
length(unique(phone_to_antenna$PhoneId)) == one_phone + (2 * two_phones)
length(unique(antennas_info$AntennaId)) == length(unique(phone_to_antenna$AntennaId))
phone_to_antenna_wide <- phone_to_antenna %>%
group_by(t, PhoneId) %>%
summarize(TileId = paste(unique(TileId), collapse = ","), .groups = "drop") %>%
pivot_wider(names_from = t, values_from = TileId, names_prefix = "t_")
head(phone_to_antenna_wide)
tile_list_original <- phone_to_antenna %>%
filter(PhoneId == 80) %>%
arrange(t) %>%
pull(TileId) %>%
as.character()
tile_list_transformed <- phone_to_antenna_wide %>%
filter(PhoneId == 80) %>%
select(-PhoneId) %>%
as.character()
length(tile_list_original)
length(tile_list_transformed)
setdiff(tile_list_original, tile_list_transformed)
setdiff(tile_list_transformed, tile_list_original)
list(tile_list_original, tile_list_transformed)
all.equal(tile_list_original, tile_list_transformed)
# Modifying dataset to accurately account for displachement ---------------
#function is needed to be able to show the displacement from distinct tiles over time
remove_consecutive_duplicates <- function(values) {
values[c(TRUE, values[-1] != values[-length(values)])]
}
non_repeating_df <- phone_to_antenna_wide %>%
pivot_longer(cols = starts_with("t_"), names_to = "Time", values_to = "Value") %>%
group_by(PhoneId) %>%
summarise(Value = list(remove_consecutive_duplicates(Value))) %>%
unnest(Value)
print(non_repeating_df)
# Extracting the count for devices connected to antennas ------------------
count_df <- non_repeating_df %>%
group_by(PhoneId, Value) %>%
summarise(Count = n(), .groups = 'drop')
print(count_df[count_df$Value == 1208, ])
print(count(non_repeating_df[non_repeating_df$Value == 1208, ]))
print(nrow(antennas_info[antennas_info$TileId == 1208 & antennas_info$EventCode %in% c(0, 2), ]))
non_repeating_df %>%
filter(PhoneId == 100, Value == "1208") %>%
nrow()
value_counts_wide <- non_repeating_df %>%
group_by(PhoneId, Value) %>%
summarise(Count = n(), .groups = 'drop') %>%
pivot_wider(names_from = Value, values_from = Count, values_fill = list(Count = 0))
print(value_counts_wide)
column_sums <- colSums(value_counts_wide[, -1], na.rm = TRUE)
print(column_sums)
sums_df <- data.frame(Column = names(column_sums), Sum = column_sums)
print(sums_df)
antennas$Tile.ID <- as.numeric(antennas$Tile.ID)
sums_df$Column <- as.numeric(sums_df$Column)
dataset1 <- antennas %>%
left_join(sums_df, by = c("Tile.ID" = "Column")) %>%
select(Antenna.ID, x, y, Tile.ID, device_count = Sum)
print(head(dataset1))
unique(dataset1$Tile.ID)
# Calculating the position of each corresponding tile in the grid ---------
grid <- read.csv("grid.csv")
origin_x <- grid$Origin.X[1]
origin_y <- grid$Origin.Y[1]
x_tile_dim <- grid$X.Tile.Dim[1]
y_tile_dim <- grid$Y.Tile.Dim[1]
no_tiles_x <- grid$No.Tiles.X[1]
no_tiles_y <- grid$No.Tiles.Y[1]
dataset1 <- dataset1 %>%
mutate(
grid_col = floor((x - origin_x) / x_tile_dim) + 1,
grid_row = floor((y - origin_y) / y_tile_dim) + 1
)
print(head(dataset1))
# Ordering the columns and handling missing values ------------------------
dataset1 <- dataset1 %>%
select(Antenna.ID, x, y, Tile.ID, grid_row, grid_col, device_count)
print(head(dataset1))
dataset1 <- dataset1 %>%
mutate(device_count = ifelse(is.na(device_count), 0, device_count))
print(dataset1)
# Preparing the data for dataset2--------------------------------------------------------
persons$Tile.ID
persons$Person.ID
persons_wide <- persons %>%
group_by(t, Person.ID,Mobile.Phone.s..ID) %>%
summarize(Tile.ID = paste(unique(Tile.ID), collapse = ","), .groups = "drop") %>%
pivot_wider(names_from = t, values_from = Tile.ID, names_prefix = "t_")
persons_wide$Mobile.Phone.s..ID
persons_wide$Mobile.Phone.s..ID <- ifelse(persons_wide$Mobile.Phone.s..ID == "", 0,
ifelse(grepl("-", persons_wide$Mobile.Phone.s..ID), 2, 1))
print(persons_wide$Mobile.Phone.s..ID)
non_repeating_df <- persons_wide %>%
pivot_longer(cols = starts_with("t_"), names_to = "Time", values_to = "Value") %>%
group_by(Person.ID, Mobile.Phone.s..ID) %>%
summarise(Value = list(remove_consecutive_duplicates(Value)), .groups = 'drop') %>%
unnest(Value) %>%
rename(person_phone_count = Mobile.Phone.s..ID)
print(non_repeating_df)
count_df <- non_repeating_df %>%
group_by(Person.ID, person_phone_count, Value) %>%
summarise(Count = n(), .groups = 'drop')
print(count_df)
non_repeating_df %>%
filter(Person.ID == "71", Value == "1090") %>%
nrow()
value_counts_wide <- non_repeating_df %>%
group_by(Person.ID, person_phone_count, Value) %>%
summarise(Count = n(), .groups = 'drop') %>%
pivot_wider(names_from = Value, values_from = Count, values_fill = list(Count = 0))
print(value_counts_wide)
column_sums <- colSums(value_counts_wide[, -c(1, 2)], na.rm = TRUE)
print(column_sums)
sums_df <- data.frame(Column = names(column_sums), Sum = column_sums)
print(sums_df)
connection_counts <- numeric(ncol(value_counts_wide) - 2)  # Exclude Person.ID and person_phone_count
names(connection_counts) <- colnames(value_counts_wide)[-c(1, 2)]  # Assign TileIDs as names
#code meant to take in account how many devices each person had
for (tile in names(connection_counts)) {
connection_counts[tile] <- sum(
ifelse(value_counts_wide[[tile]] > 0, value_counts_wide$person_phone_count * value_counts_wide[[tile]], 0),
na.rm = TRUE
)
}
# Create a data frame to store the results
connection_counts_df <- data.frame(
TileID = names(connection_counts),
ConnectionCount = connection_counts
)
# Print the resulting data frame
head(connection_counts_df)
sums_df <- connection_counts_df %>%
inner_join(sums_df, by = c("TileID" = "Column")) %>%
select(TileID, ConnectionCount, Sum)
head(sums_df)
nrow(sums_df)
antennas$Tile.ID <- as.numeric(antennas$Tile.ID)
sums_df$TileID <- as.numeric(sums_df$TileID)
sums_df$ConnectionCount <- as.numeric(sums_df$ConnectionCount)
tiles <- antennas_info %>%
group_by(TileId) %>%
slice(1) %>%
ungroup() %>%
arrange(TileId)
nrow(tiles) == length(unique(antennas_info$TileId))
head(tiles,5)
#tiles$TileId <- as.character(tiles$TileId)
typeof(sums_df$TileID)
dataset2 <- tiles %>%
left_join(sums_df, by = c("TileId" = "TileID")) %>%
select(TileId, x, y, person_count = Sum, unique_devices = ConnectionCount)
print(head(dataset2))
dataset2 <- dataset2 %>%
mutate(
grid_col = floor((x - origin_x) / x_tile_dim) + 1,
grid_row = floor((y - origin_y) / y_tile_dim) + 1
)
print(head(dataset2))
dataset2 <- dataset2 %>%
select(TileId, x, y, grid_row, grid_col, person_count, unique_devices)
print(head(dataset2))
dataset2 <- dataset2 %>%
mutate(person_count = ifelse(is.na(person_count), 0, person_count))
print(dataset2)
# Exporting the dataframes as CSV files -----------------------------------
export(dataset1, "dataset1.csv")
export(dataset2, "dataset2.csv")
#export(value_counts_wide, "testis.csv")
colnames(dataset1)
colnames(dataset2)
#dataset1$Tile.ID <- as.character(dataset1$Tile.ID)
# Plots/Tests -------------------------------------------------------------
test_df <- dataset1 %>%
inner_join(dataset2, by = c("Tile.ID" = "TileId")) %>%
select(Tile.ID, device_count, unique_devices, person_count)
head(test_df)
nrow(test_df)
equal_counts_df <- test_df[test_df$antennas_device_count == test_df$persons_device_count, ]
print(equal_counts_df)
debug1 <- dataset1 %>% select(Tile.ID, device_count)
debug2 <- test_df %>% select(Tile.ID, device_count)
setdiff(debug1, debug2)
windows()
test_df %>%
#filter(device_count >= 50) %>%
mutate(Tile.ID = as.factor(Tile.ID)) %>%
mutate(Tile.ID = fct_reorder(Tile.ID, device_count)) %>%
ggplot(aes(x = Tile.ID, y = device_count)) +
geom_bar(stat = "identity", fill = "#f68060", alpha = .6, width = .4) +
geom_text(
aes(label = paste(
"There were a total of ", device_count,
"devices connected to this network ",   #, unique_devices,
"among a pool of", person_count, "persons"
)),
hjust = -0.1, size = 3, color = "black"
) +
coord_flip() +
xlab("") +
theme_bw()
windows()
dataset2 %>%
filter(person_count >= 75) %>%
mutate(TileId = as.factor(TileId)) %>%
mutate(TileId = fct_reorder(TileId, person_count)) %>%
ggplot(aes(x = TileId, y = person_count)) +
geom_bar(stat = "identity", fill = "#f68060", alpha = .6, width = .4) +
coord_flip() +
xlab("") +
theme_bw()
windows()
hist(test_df$device_count)
windows()
hist(test_df$unique_devices, main='Unique Devices')
windows()
hist(dataset2$person_count)
dataset2 <- dataset2 %>% select(TileId,x,y,grid_row,grid_col,person_count)
export(dataset2, 'dataset2.csv')
sum(test_df$device_count)
dataset1 <- dataset1 %>%
distinct(Tile.ID, .keep_all = TRUE)
nrow(dataset1)
nrow(dataset2)
colnames(dataset2)
dataset2 <- dataset2 %>%
distinct(TileId, .keep_all = TRUE)
nrow(dataset2)
library(dplyr)
library(tidyr)
library(rio)
library(ggplot2)
library(forcats)
# Loading the data --------------------------------------------------------
antennas_info <- read.csv('AntennaInfo_MNO_MNO1.csv')
antennas <- read.csv('antennas.csv')
persons <- read.csv('persons.csv')
head(antennas_info)
head(persons)
# Checking how many unique phones there are -------------------------------
phone_counts <- persons %>%
group_by(Person.ID) %>%
summarise(phones = unique(`Mobile.Phone.s..ID`)) %>%
mutate(
phone_count = case_when(
phones == "" ~ 0,  # No phone
grepl("-", phones) ~ 2,  # Two phones (contains '-')
TRUE ~ 1  # One phone
)
)
# Counting how many ppl are in each category
no_phone <- sum(phone_counts$phone_count == 0)
one_phone <- sum(phone_counts$phone_count == 1)
two_phones <- sum(phone_counts$phone_count == 2)
# Output the results
cat("No phone:", no_phone, "\n")
cat("One phone:", one_phone, "\n")
cat("Two phones:", two_phones, "\n")
# Joining the data for dataset1--------------------------------------------------------
phones <- persons %>%
select(t, Mobile.Phone.s..ID) %>%
mutate(Mobile.Phone.s..ID = as.character(Mobile.Phone.s..ID)) %>%
separate_rows(Mobile.Phone.s..ID, sep = "-") %>%
filter(!is.na(Mobile.Phone.s..ID) & Mobile.Phone.s..ID != "")
# Only Event Code of 0 and 2 corresponds to a successful connection
phone_to_antenna <- antennas_info %>%
filter(EventCode %in% c(0, 2)) %>%
mutate(PhoneId = as.character(PhoneId)) %>%
select(t, PhoneId, AntennaId,TileId) %>%
distinct()
nrow(phone_to_antenna)
# Checking data integrity -------------------------------------------------
length(unique(phone_to_antenna$PhoneId)) == one_phone + (2 * two_phones)
length(unique(antennas_info$AntennaId)) == length(unique(phone_to_antenna$AntennaId))
phone_to_antenna_wide <- phone_to_antenna %>%
group_by(t, PhoneId) %>%
summarize(TileId = paste(unique(TileId), collapse = ","), .groups = "drop") %>%
pivot_wider(names_from = t, values_from = TileId, names_prefix = "t_")
head(phone_to_antenna_wide)
tile_list_original <- phone_to_antenna %>%
filter(PhoneId == 80) %>%
arrange(t) %>%
pull(TileId) %>%
as.character()
tile_list_transformed <- phone_to_antenna_wide %>%
filter(PhoneId == 80) %>%
select(-PhoneId) %>%
as.character()
length(tile_list_original)
length(tile_list_transformed)
setdiff(tile_list_original, tile_list_transformed)
setdiff(tile_list_transformed, tile_list_original)
list(tile_list_original, tile_list_transformed)
all.equal(tile_list_original, tile_list_transformed)
# Modifying dataset to accurately account for displachement ---------------
#function is needed to be able to show the displacement from distinct tiles over time
remove_consecutive_duplicates <- function(values) {
values[c(TRUE, values[-1] != values[-length(values)])]
}
non_repeating_df <- phone_to_antenna_wide %>%
pivot_longer(cols = starts_with("t_"), names_to = "Time", values_to = "Value") %>%
group_by(PhoneId) %>%
summarise(Value = list(remove_consecutive_duplicates(Value))) %>%
unnest(Value)
print(non_repeating_df)
# Extracting the count for devices connected to antennas ------------------
count_df <- non_repeating_df %>%
group_by(PhoneId, Value) %>%
summarise(Count = n(), .groups = 'drop')
print(count_df[count_df$Value == 1208, ])
print(count(non_repeating_df[non_repeating_df$Value == 1208, ]))
print(nrow(antennas_info[antennas_info$TileId == 1208 & antennas_info$EventCode %in% c(0, 2), ]))
non_repeating_df %>%
filter(PhoneId == 100, Value == "1208") %>%
nrow()
value_counts_wide <- non_repeating_df %>%
group_by(PhoneId, Value) %>%
summarise(Count = n(), .groups = 'drop') %>%
pivot_wider(names_from = Value, values_from = Count, values_fill = list(Count = 0))
print(value_counts_wide)
column_sums <- colSums(value_counts_wide[, -1], na.rm = TRUE)
print(column_sums)
sums_df <- data.frame(Column = names(column_sums), Sum = column_sums)
print(sums_df)
antennas$Tile.ID <- as.numeric(antennas$Tile.ID)
sums_df$Column <- as.numeric(sums_df$Column)
dataset1 <- antennas %>%
left_join(sums_df, by = c("Tile.ID" = "Column")) %>%
select(Antenna.ID, x, y, Tile.ID, device_count = Sum)
print(head(dataset1))
unique(dataset1$Tile.ID)
# Calculating the position of each corresponding tile in the grid ---------
grid <- read.csv("grid.csv")
origin_x <- grid$Origin.X[1]
origin_y <- grid$Origin.Y[1]
x_tile_dim <- grid$X.Tile.Dim[1]
y_tile_dim <- grid$Y.Tile.Dim[1]
no_tiles_x <- grid$No.Tiles.X[1]
no_tiles_y <- grid$No.Tiles.Y[1]
dataset1 <- dataset1 %>%
mutate(
grid_col = floor((x - origin_x) / x_tile_dim) + 1,
grid_row = floor((y - origin_y) / y_tile_dim) + 1
)
print(head(dataset1))
# Ordering the columns and handling missing values ------------------------
dataset1 <- dataset1 %>%
select(Antenna.ID, x, y, Tile.ID, grid_row, grid_col, device_count)
print(head(dataset1))
dataset1 <- dataset1 %>%
mutate(device_count = ifelse(is.na(device_count), 0, device_count))
dataset1 <- dataset1 %>%
distinct(Tile.ID, .keep_all = TRUE)
print(dataset1)
# Preparing the data for dataset2--------------------------------------------------------
persons$Tile.ID
persons$Person.ID
persons_wide <- persons %>%
group_by(t, Person.ID,Mobile.Phone.s..ID) %>%
summarize(Tile.ID = paste(unique(Tile.ID), collapse = ","), .groups = "drop") %>%
pivot_wider(names_from = t, values_from = Tile.ID, names_prefix = "t_")
persons_wide$Mobile.Phone.s..ID
persons_wide$Mobile.Phone.s..ID <- ifelse(persons_wide$Mobile.Phone.s..ID == "", 0,
ifelse(grepl("-", persons_wide$Mobile.Phone.s..ID), 2, 1))
print(persons_wide$Mobile.Phone.s..ID)
non_repeating_df <- persons_wide %>%
pivot_longer(cols = starts_with("t_"), names_to = "Time", values_to = "Value") %>%
group_by(Person.ID, Mobile.Phone.s..ID) %>%
summarise(Value = list(remove_consecutive_duplicates(Value)), .groups = 'drop') %>%
unnest(Value) %>%
rename(person_phone_count = Mobile.Phone.s..ID)
print(non_repeating_df)
count_df <- non_repeating_df %>%
group_by(Person.ID, person_phone_count, Value) %>%
summarise(Count = n(), .groups = 'drop')
print(count_df)
non_repeating_df %>%
filter(Person.ID == "71", Value == "1090") %>%
nrow()
value_counts_wide <- non_repeating_df %>%
group_by(Person.ID, person_phone_count, Value) %>%
summarise(Count = n(), .groups = 'drop') %>%
pivot_wider(names_from = Value, values_from = Count, values_fill = list(Count = 0))
print(value_counts_wide)
column_sums <- colSums(value_counts_wide[, -c(1, 2)], na.rm = TRUE)
print(column_sums)
sums_df <- data.frame(Column = names(column_sums), Sum = column_sums)
print(sums_df)
connection_counts <- numeric(ncol(value_counts_wide) - 2)  # Exclude Person.ID and person_phone_count
names(connection_counts) <- colnames(value_counts_wide)[-c(1, 2)]  # Assign TileIDs as names
#code meant to take in account how many devices each person had
for (tile in names(connection_counts)) {
connection_counts[tile] <- sum(
ifelse(value_counts_wide[[tile]] > 0, value_counts_wide$person_phone_count * value_counts_wide[[tile]], 0),
na.rm = TRUE
)
}
# Create a data frame to store the results
connection_counts_df <- data.frame(
TileID = names(connection_counts),
ConnectionCount = connection_counts
)
# Print the resulting data frame
head(connection_counts_df)
sums_df <- connection_counts_df %>%
inner_join(sums_df, by = c("TileID" = "Column")) %>%
select(TileID, ConnectionCount, Sum)
head(sums_df)
nrow(sums_df)
antennas$Tile.ID <- as.numeric(antennas$Tile.ID)
sums_df$TileID <- as.numeric(sums_df$TileID)
sums_df$ConnectionCount <- as.numeric(sums_df$ConnectionCount)
tiles <- antennas_info %>%
group_by(TileId) %>%
slice(1) %>%
ungroup() %>%
arrange(TileId)
nrow(tiles) == length(unique(antennas_info$TileId))
head(tiles,5)
#tiles$TileId <- as.character(tiles$TileId)
typeof(sums_df$TileID)
dataset2 <- tiles %>%
left_join(sums_df, by = c("TileId" = "TileID")) %>%
select(TileId, x, y, person_count = Sum, unique_devices = ConnectionCount)
print(head(dataset2))
dataset2 <- dataset2 %>%
mutate(
grid_col = floor((x - origin_x) / x_tile_dim) + 1,
grid_row = floor((y - origin_y) / y_tile_dim) + 1
)
print(head(dataset2))
dataset2 <- dataset2 %>%
select(TileId, x, y, grid_row, grid_col, person_count, unique_devices)
print(head(dataset2))
dataset2 <- dataset2 %>%
mutate(person_count = ifelse(is.na(person_count), 0, person_count))
print(dataset2)
nrow(dataset2)
dataset2 <- dataset2 %>%
distinct(TileId, .keep_all = TRUE)
nrow(dataset2)
# Exporting the dataframes as CSV files -----------------------------------
export(dataset1, "dataset1.csv")
export(dataset2, "dataset2.csv")
#export(value_counts_wide, "testis.csv")
colnames(dataset1)
colnames(dataset2)
#dataset1$Tile.ID <- as.character(dataset1$Tile.ID)
# Plots/Tests -------------------------------------------------------------
test_df <- dataset1 %>%
inner_join(dataset2, by = c("Tile.ID" = "TileId")) %>%
select(Tile.ID, device_count, unique_devices, person_count)
head(test_df)
nrow(test_df)
equal_counts_df <- test_df[test_df$antennas_device_count == test_df$persons_device_count, ]
print(equal_counts_df)
debug1 <- dataset1 %>% select(Tile.ID, device_count)
debug2 <- test_df %>% select(Tile.ID, device_count)
setdiff(debug1, debug2)
windows()
test_df %>%
#filter(device_count >= 50) %>%
mutate(Tile.ID = as.factor(Tile.ID)) %>%
mutate(Tile.ID = fct_reorder(Tile.ID, device_count)) %>%
ggplot(aes(x = Tile.ID, y = device_count)) +
geom_bar(stat = "identity", fill = "#f68060", alpha = .6, width = .4) +
geom_text(
aes(label = paste(
"There were a total of ", device_count,
"devices connected to this network ",   #, unique_devices,
"among a pool of", person_count, "persons"
)),
hjust = -0.1, size = 3, color = "black"
) +
coord_flip() +
xlab("") +
theme_bw()
windows()
dataset2 %>%
filter(person_count >= 75) %>%
mutate(TileId = as.factor(TileId)) %>%
mutate(TileId = fct_reorder(TileId, person_count)) %>%
ggplot(aes(x = TileId, y = person_count)) +
geom_bar(stat = "identity", fill = "#f68060", alpha = .6, width = .4) +
coord_flip() +
xlab("") +
theme_bw()
windows()
hist(test_df$device_count)
windows()
hist(test_df$unique_devices, main='Unique Devices')
windows()
hist(dataset2$person_count)
dataset2 <- dataset2 %>% select(TileId,x,y,grid_row,grid_col,person_count)
export(dataset2, 'dataset2.csv')
sum(test_df$device_count)
nrow(dataset1)
